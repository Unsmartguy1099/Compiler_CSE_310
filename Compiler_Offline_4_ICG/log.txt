Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 1: Token <ID> Lexeme b found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 1: Token <ID> Lexeme c found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
unit : var_declaration
program : unit
Line# 3: Token <VOID> Lexeme void found
type_specifier : VOID
Line# 3: Token <ID> Lexeme func_a found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <RPAREN> Lexeme ) found
Line# 3: Token <LCURL> Lexeme { found
Line# 5: Token <ID> Lexeme a found
Line# 5: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 5: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 5: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 6: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
Line# 8: Token <INT> Lexeme int found
type_specifier : INT
Line# 8: Token <ID> Lexeme foo found
Line# 8: Token <LPAREN> Lexeme ( found
Line# 8: Token <INT> Lexeme int found
type_specifier : INT
Line# 8: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 8: Token <RPAREN> Lexeme ) found
Line# 8: Token <LCURL> Lexeme { found
Line# 9: Token <ID> Lexeme a found
Line# 9: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 9: Token <ID> Lexeme a found
Line# 9: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 9: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 9: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 10: Token <RETURN> Lexeme return found
Line# 10: Token <ID> Lexeme a found
Line# 10: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 11: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 14: Token <INT> Lexeme int found
type_specifier : INT
Line# 14: Token <ID> Lexeme bar found
Line# 14: Token <LPAREN> Lexeme ( found
Line# 14: Token <INT> Lexeme int found
type_specifier : INT
Line# 14: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 14: Token <COMMA> Lexeme , found
Line# 14: Token <INT> Lexeme int found
type_specifier : INT
Line# 14: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 14: Token <RPAREN> Lexeme ) found
Line# 14: Token <LCURL> Lexeme { found
Line# 15: Token <ID> Lexeme c found
Line# 15: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 15: Token <CONST_INT> Lexeme 4 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 15: Token <MULOP> Lexeme * found
Line# 15: Token <ID> Lexeme a found
Line# 15: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : term MULOP unary_expression
simple_expression : term
Line# 15: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 15: Token <MULOP> Lexeme * found
Line# 15: Token <ID> Lexeme b found
Line# 15: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : term MULOP unary_expression
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 16: Token <RETURN> Lexeme return found
Line# 16: Token <ID> Lexeme c found
Line# 16: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 17: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 19: Token <INT> Lexeme int found
type_specifier : INT
Line# 19: Token <ID> Lexeme main found
Line# 19: Token <LPAREN> Lexeme ( found
Line# 19: Token <RPAREN> Lexeme ) found
Line# 19: Token <LCURL> Lexeme { found
Line# 21: Token <INT> Lexeme int found
type_specifier : INT
Line# 21: Token <ID> Lexeme i found
Line# 21: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 21: Token <ID> Lexeme j found
Line# 21: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 21: Token <ID> Lexeme k found
Line# 21: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 21: Token <ID> Lexeme l found
Line# 21: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 24: Token <ID> Lexeme i found
Line# 24: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 24: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 24: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 25: Token <ID> Lexeme j found
Line# 25: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 25: Token <CONST_INT> Lexeme 6 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 25: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 27: Token <ID> Lexeme func_a found
Line# 27: Token <LPAREN> Lexeme ( found
Line# 27: Token <RPAREN> Lexeme ) found
argument_list : ephsilon
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 27: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 28: Token <ID> Lexeme println found
Line# 28: Token <LPAREN> Lexeme ( found
Line# 28: Token <ID> Lexeme a found
Line# 28: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 28: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 30: Token <ID> Lexeme k found
Line# 30: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 30: Token <ID> Lexeme foo found
Line# 30: Token <LPAREN> Lexeme ( found
Line# 30: Token <ID> Lexeme i found
Line# 30: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 30: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 31: Token <ID> Lexeme println found
Line# 31: Token <LPAREN> Lexeme ( found
Line# 31: Token <ID> Lexeme k found
Line# 31: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 31: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 33: Token <ID> Lexeme l found
Line# 33: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 33: Token <ID> Lexeme bar found
Line# 33: Token <LPAREN> Lexeme ( found
Line# 33: Token <ID> Lexeme i found
Line# 33: Token <COMMA> Lexeme , found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
Line# 33: Token <ID> Lexeme j found
Line# 33: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 33: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 34: Token <ID> Lexeme println found
Line# 34: Token <LPAREN> Lexeme ( found
Line# 34: Token <ID> Lexeme l found
Line# 34: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 34: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 36: Token <ID> Lexeme j found
Line# 36: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 36: Token <CONST_INT> Lexeme 6 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 36: Token <MULOP> Lexeme * found
Line# 36: Token <ID> Lexeme bar found
Line# 36: Token <LPAREN> Lexeme ( found
Line# 36: Token <ID> Lexeme i found
Line# 36: Token <COMMA> Lexeme , found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
Line# 36: Token <ID> Lexeme j found
Line# 36: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : term MULOP unary_expression
Line# 36: Token <ADDOP> Lexeme + found
simple_expression : term
Line# 36: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 36: Token <ADDOP> Lexeme - found
simple_expression : simple_expression ADDOP term
Line# 36: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 36: Token <MULOP> Lexeme * found
Line# 36: Token <ID> Lexeme foo found
Line# 36: Token <LPAREN> Lexeme ( found
Line# 36: Token <ID> Lexeme i found
Line# 36: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : term MULOP unary_expression
Line# 36: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 37: Token <ID> Lexeme println found
Line# 37: Token <LPAREN> Lexeme ( found
Line# 37: Token <ID> Lexeme j found
Line# 37: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 37: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 40: Token <RETURN> Lexeme return found
Line# 40: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 40: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 41: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
